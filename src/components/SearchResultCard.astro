---
import Badge from "./Badge.astro";
import Card from "./Card.astro";
import Term from "./Term.astro";
import BadgeSection from "./BadgeSection.astro";
import {processData} from "../scripts/processData";
const {word, entry} = Astro.props;
const {
    printKatakana,
    aliasString,
    numDistinctTerms,
    allTerms,
    generalTerm,
    originTerm,
    originFlags,
    originEval,
    correctionNeeded,
    correction,
    correctionFlags,
    correctionEval
} = processData(word, entry);
---

<!-- TODO make search-result take the hide properties -->
<!-- TODO update url on click (populate stack) -->
<search-result data-word={word} class="search-result" id={word}>
    <Card isClickable>
        <h1 class="katakana"><b>{printKatakana}</b><span class="alias-string">{aliasString}</span></h1>
        <div class="info">
            <div class="english">
                {originTerm&&
                    <Term evaluation={originEval} countries={originFlags}>
                        {originTerm}
                    </Term>}
                {
                    correctionNeeded ? (
                            <Term evaluation={correctionEval} countries={correctionFlags}>
                                {correction}
                            </Term>
                    ) : (
                            <Term evaluation="neutral">... + {numDistinctTerms - 1} more</Term><!-- TODO make look nice -->
                    )
                }
            </div>
            <BadgeSection tags={entry.tags}/>
        </div>
    </Card>
</search-result>

<style>
    .alias-string {
        color: darkgrey;
    }

    .katakana {
        margin-bottom: 0.5rem;
        margin-top: 0.5rem;
        color: floralwhite;
    }

    .info {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .search-result {
        display: flex;
    }

    .search-result .card {
        width: 100%;
        margin-top: 0;
    }
</style>

<script>

    class SearchResult extends HTMLElement {
        connectedCallback() {
            this.addEventListener("click", (e) => {
                //let prevResultsCard = document.querySelector(".details-pane .card[display='flex']");
                let prevResultsCard = document.querySelector(".details-pane .selected");
                console.log(prevResultsCard);
                prevResultsCard.classList.remove("selected");
                prevResultsCard.style.visibility = "hidden";
                prevResultsCard.style.display = "none";
                let newResultsCard = document.querySelector(`#${this.dataset.word}-results`);
                newResultsCard.classList.add("selected");
                newResultsCard.style.visibility = "visible";
                newResultsCard.style.display = "flex";
            });
        }
    }

    customElements.define("search-result", SearchResult);
</script>
