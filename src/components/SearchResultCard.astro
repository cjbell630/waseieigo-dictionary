---
import Badge from "./Badge.astro";
import Card from "./Card.astro";
import Term from "./Term.astro";
import BadgeSection from "./BadgeSection.astro";
import {processData} from "../scripts/processData";
const {word, entry} = Astro.props;
const {
    printKatakana,
    aliasString,
    numDistinctTerms,
    allTerms,
    firstTerm,
    firstTermMeaning,
    firstTermFlags,
    firstTermEval,
    correctionNotNeeded,
    secondTerm,
    secondTermFlags,
    secondTermEval,
} = processData(word, entry);
---

<!-- TODO make search-result take the hide properties -->
<search-result data-word={word} class="search-result" id={word}>
    <Card isClickable>
        <h1 class="katakana"><b>{printKatakana}</b><br/><span class="alias-string">{aliasString}</span></h1>
        <div class="info">
            <div class="english">
                {
                    firstTerm &&
                        <Term evaluation={firstTermEval} countries={firstTermFlags}>
                            {firstTerm}
                        </Term>
                }
                <div class="second-term-row">
                    {
                        secondTerm &&
                            <Term evaluation={secondTermEval} countries={secondTermFlags}>
                                {secondTerm}
                            </Term>
                    }
                    <!-- TODO either change this number or allow multiple terms to be displayed when origin is good -->
                    {
                        numDistinctTerms > 2 &&
                            <Term evaluation="neutral">…他{numDistinctTerms - 2}つ</Term>
                    }
                </div>
            </div>
            <BadgeSection tags={entry.tags} class="search-result-badges"/>
        </div>
    </Card>
</search-result>

<style>
    .alias-string {
        color: darkgrey;
        vertical-align: text-bottom;
    }

    .katakana {
        margin-bottom: 0.5rem;
        margin-top: 0.5rem;
        color: floralwhite;
    }

    .info {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .search-result {
        display: flex;
    }

    .search-result .card {
        margin-top: 0;
        min-width: -webkit-fill-available;
    }

    .second-term-row {
        display: flex;
        flex-direction: row;
    }

    .second-term-row > h2.neutral {
        margin-top: 0;
        margin-left: 0;
    }

    .katakana br {
        display: none;
    }

    /* PORTRAIT ONLY */
    @media (orientation: portrait) {
        .katakana {
            line-height: 1em;
            margin-bottom: 0;
        }

        .katakana br {
            display: inline;
        }

        .alias-string {
            font-size: 0.7em;
        }

        .info {
            flex-direction: column;
        }

        .second-term-row {
            flex-direction: column;
        }

        .search-result-badges {
            align-self: flex-start;
            justify-content: flex-start;
            width: -webkit-fill-available;
        }
    }
</style>

<script>
    import {navigateToCard} from "../scripts/navigation.js";

    class SearchResult extends HTMLElement {
        connectedCallback() {
            this.addEventListener("click", (e) => {
                navigateToCard(this.dataset.word)
            });
        }
    }

    customElements.define("search-result", SearchResult);
</script>
