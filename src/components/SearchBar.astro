---
---

<search-bar>
    <label class="search-bar">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
            <circle cx="10" cy="10" r="7" stroke="currentColor" stroke-width="2" fill="none"/>
            <line x1="16.5" y1="16.5" x2="22" y2="22" stroke="currentColor" stroke-width="2"/>
        </svg>
        <input type="text" placeholder="Search..." id="search-bar" autocomplete="off"/>
    </label>
</search-bar>

<style>
    .search-bar {
        display: flex;
        align-items: center;
        margin: 1rem;
        padding: 0.5em;
        border-radius: 50px;
        border: 4px solid rgba(255, 255, 255, 0.25);
        transition: all 0.3s ease;
        font-size: 1.5rem;
        cursor: text;
        caret-color: floralwhite;
        background-color: rgba(255, 255, 255, 0.18);
    }

    .search-bar input {
        border: none;
        outline: none;
        background-color: transparent;
        flex: 1;
        font-size: inherit;
        color: floralwhite;
    }

    .search-bar input::placeholder {
        color: rgba(255, 250, 240, 0.6);
    }

    .search-bar svg {
        height: 1em;
        width: auto;
        color: floralwhite;
        margin-left: 0.16em;
        margin-right: 0.66em;
    }

    .search-bar:focus-within {
        border-color: rgba(255, 255, 255, 0.5);
    }
</style>

<script>
    import {convertHiraganaInString, removeFinalConsonants} from "../scripts/japaneseTextCorrection";
    class SearchBar extends HTMLElement {
        connectedCallback() {
            console.log("hello");
            let oldValue = "";
            this.addEventListener("input", (e) => {
                // TODO sort with flex order (assign match strength and set that as order)
                let newValue = e.target.value;
                console.log(`old: ${oldValue}, new: ${newValue}`);
                if (oldValue == newValue) {
                    return;
                }
                if (newValue == "") { // erased
                    document.querySelectorAll(".search-result").forEach((value) => {
                        console.log(value);
                        value.style.display = "flex";
                        value.style.visibility = "visible";
                    });
                } else {
                    let newConverted = convertHiraganaInString(newValue);
                    let newStripped = newConverted;
                    if(e.isComposing){
                        newStripped = removeFinalConsonants(newStripped);
                    }
                    if (oldValue == "") { // first char
                        console.log("first char");
                    }
                    document.querySelectorAll(".search-result").forEach((value) => {
                        let rank = 0;
                        if (value.id.includes(newStripped)) {
                            rank -= newStripped.length;
                        }
                        if (newStripped.includes(value.id)) {
                            rank -= value.id.length;
                        }
                        if (rank < 0) {
                            value.style.display = "flex";
                            value.style.visibility = "visible";
                            value.style.order = rank;
                        } else {
                            value.style.display = "none";
                            value.style.visibility = "hidden";
                        }
                        console.log(value);
                    });
                }
                oldValue = e.target.value;
            });
        }
    }

    customElements.define("search-bar", SearchBar);
</script>