---
const {path} = Astro.props;
const {class: className, ...rest} = Astro.props;
---

<audio-button class:list={[className]} {...rest}>
    <audio class="audio-source" src={path}></audio>

    <!-- Use an emoji or your own SVG/icon font -->
    <button class="audio-button-icon" aria-label="Play or pause audio">
        ðŸ”ˆ
    </button>
</audio-button>

<style>
    .audio-source {
        visibility: hidden;
    }

    .audio-button-icon {
        background: none;
        border: none;
        cursor: pointer;
        color: #444;
        font-size: 1.25em;
        margin: 0;
        padding: 0;
        line-height: 0em;
        vertical-align: middle;
    }

    .audio-button-icon:hover {
        color: #000;
    }


    /* PORTRAIT ONLY */
    @media (orientation: portrait) {
        .audio-button-icon {
            font-size: 1em;
            padding-left: 0.25em;
        }
    }
</style>
<script>
    class AudioButton extends HTMLElement {
        connectedCallback() {
            let playing = false;
            let audio = this.getElementsByClassName("audio-source")[0];
            this.getElementsByClassName("audio-button-icon")[0].addEventListener("click", (e) => {
                if (!playing) {
                    audio.play();
                    playing = true;
                }
            });
            audio.addEventListener("ended", e => {
                playing = false;
            });
        }
    }

    customElements.define("audio-button", AudioButton);
</script>
