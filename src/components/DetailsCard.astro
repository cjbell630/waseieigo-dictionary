---
import Card from "./Card.astro";
import Badge from "./Badge.astro";
import Term from "./Term.astro";
import BadgeSection from "./BadgeSection.astro";
import {processData} from "../scripts/processData";
import RelatedTerm from "./RelatedTerm.astro";
import AudioButton from "./AudioButton.astro";
const {word, entry} = Astro.props;
const {
    printKatakana,
    aliasString,
    numDistinctTerms,
    allTerms,
    firstTerm,
    firstTermMeaning,
    firstTermFlags,
    firstTermEval,
    correctionNotNeeded,
    secondTerm,
    secondTermFlags,
    secondTermEval,
    hasNotes,
    hasSources
} = processData(word, entry);
---

<div class="details-card" id={word + "-results"}>
    <Card>
        <div class="header-section">
            <div class="term-info">
                <h1 class="katakana"><b>{printKatakana}</b><span class="alias-string">{aliasString}</span></h1>
                <div class="origin-container">
                    <!-- TODO could put actual eval here with (correctionNotNeeded?"neutral":firstTermEval) and throw in flags too, but maybe this looks better-->
                    <Term evaluation={firstTermEval === "bad" ? "bad" : "neutral"}
                          countries={firstTermEval === "bad" ? firstTermFlags : []}>
                        {firstTerm}
                    </Term>
                    <h2 class="meaning">{firstTermMeaning && "（" + firstTermMeaning + "）"}</h2></div>
            </div>
            <BadgeSection tags={entry.tags}/>
        </div>
        <hr/>
        <section class="facet-section">
            <!-- : facetRegion.terms.join(", ") === firstTerm ? firstTermEval -->
            {Object.entries(entry.facets).flatMap(([facetName, facetInfo]) => [
                <h3 class="facet">{facetName}</h3>,
                ...facetInfo.flatMap(facetRegion =>
                    [
                        <div class="term-row">
                            <Term evaluation={facetRegion.terms.join(", ") === secondTerm ? secondTermEval : "good"}
                                  countries={facetRegion.regions}>{facetRegion.terms.join(", ")}</Term>
                            {facetRegion.audio &&
                                    <AudioButton path={facetRegion.audio}/>}
                        </div>,
                        facetRegion.examples && Object.entries(facetRegion.examples).map(([jp, en]) =>
                                <p class="example">"{en}"<br/>("{jp}")</p>)
                    ]
                )
            ])}
        </section>
        {hasNotes &&
                <p class="notes">注釈:<br/>{entry.notes.join("<br/>")}</p>
        }
        {
            hasSources &&
                <hr/>
                <p class="sources">出典:<br/>{Object.entries(entry.sources).map(([name, url]) =>
                    (<a href={url}>{name}</a>)
                )}</p>
        }
        <!-- TODO related terms -->
    </Card>
    {
        entry.related &&
        (
                <div class="related-terms">
                    関連単語/関連項目
                    {entry.related.map(relatedWord => (
                            <RelatedTerm word={relatedWord} targetId={relatedWord}></RelatedTerm>))}
                </div>)
    }
</div>


<style>
    .details-card {
        display: none;
        visibility: hidden;
        padding-bottom: 1.25rem;
        flex-direction: column;
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
    }

    .header-section {
        display: flex;
        justify-content: space-between;
    }

    .term {
        margin-left: 0.25em;
    }

    .facet-section {
    }

    .facet-section .term {
        margin-left: 0.75em;
    }

    .facet {
        color: black;
        margin-top: 0.25em;
        margin-bottom: 0.5em;
    }

    .notes {
        font-size: 0.9em;
        margin-top: 0.5em;
        margin-bottom: 0.5em;
        width: 75%;
        text-wrap: balance;
    }

    hr {
        width: 100%;
        border: solid 0.5px lightslategrey;
    }

    .sources {
        margin-bottom: 0;
        margin-top: 0;
        font-size: 0.7em;
    }

    .related-terms {
        display: flex;
        flex-direction: row;
    }

    .origin-container h2 {
        display: inline;
        margin-right: 0;
    }

    .meaning {
        color: darkgrey;
        display: inline;
    }

    .example {
        font-size: small;
        margin: 0 0 0 4em;
        line-height: 1em;
    }

    .term-row {
        display: flex;
        flex-direction: row;
    }

    /* PORTRAIT ONLY */
    @media (orientation: portrait) {
        .alias-string {
            font-size: 0.75em;
            vertical-align: text-bottom;
        }

        .header-section {
            flex-wrap: wrap;
        }
    }


    /* currently copied from SearchResultCard */

    .alias-string {
        color: darkgrey;
        vertical-align: text-bottom;
    }

    .katakana {
        margin-bottom: 0.5rem;
        margin-top: 0.5rem;
        color: floralwhite;
    }

    .badges {
        display: flex;
        flex-wrap: wrap;
        align-self: flex-end;
        justify-content: flex-end;
        margin-left: 0%;
    }
</style>