---
import Speak from "./symbols/Speak.astro";
import Think from "./symbols/Think.astro";
import NotEN from "./symbols/NotEN.astro";
import Flag from "./symbols/Flag.astro";
import Scissors from "./symbols/Scissors.astro";
import Batsu from "./symbols/Batsu.astro";
const {tag} = Astro.props;

let Icon, text, color, bgColor;

switch (tag) {
    case "not-en":
        Icon = NotEN;
        text = "英語以外の由来";
        color = "aqua";
        bgColor = "mediumblue";
        break;
    case "clipping":
        Icon = Scissors;
        text = "短縮";
        color = "blue";
        bgColor = "lightcyan";
        break;
    case "nuance":
        Icon = Think;
        text = "ニュアンス";
        color = "gold";
        bgColor = "black";
        break;
    case "wtf":
        Icon = Batsu;
        text = "ガチ和製英語";
        color = "red";
        bgColor = "black";
        break;
    case "regional":
        Icon = Flag;
        text = "方言";
        color = "darkorange";
        bgColor = "black";
        break;
    case "pronunciation":
        text = "発音注意";
        Icon = Speak;
        color = "purple";
        bgColor = "black";
        break;
    case "abnormal":
        text = "伝わるけど変";
        Icon = Speak;
        color = "purple";
        bgColor = "black";
        break;
    case "possibly":
        text = "伝わるかも";
        Icon = Speak;
        color = "purple";
        bgColor = "black";
        break;
    case "diff-meaning":
        text = "全然違う意味";
        Icon = Speak;
        color = "purple";
        bgColor = "black";
        break;
    case "offensive":
        text = "卑語";
        Icon = Speak;
        color = "purple";
        bgColor = "black";
        break;
    case "jp-only":
        text = "対応英語がない";
        Icon = Speak;
        color = "purple";
        bgColor = "black";
        break;
    case "tense":
        text = "変化注意";
        Icon = Speak;
        color = "purple";
        bgColor = "black";
        break;
    default:
        text = "?";
        Icon = Speak;
        color = "black";
        bgColor = "white";
}
---
<span class="badge">
    <span class="inline-badge-icon" aria-label="comment"><Icon/></span>
    <span class="badge-text">{text}</span>
</span>


<style define:vars={{color, bgColor}}>
    .badge {
        display: inline-flex;
        padding: 0;
        margin: 1%;
        border-radius: 10px;
        font-size: 1.25rem;
        line-height: 1.5em;
        font-weight: 500;
        text-align: center;
        border: 0.13em solid var(--color); /*TODO */
        color: var(--color);
        /* if color is light, use black bg, dark then white bg*/
        background-color: color-mix(in srgb, var(--color) 17.7%, transparent);
        vertical-align: middle;
        height: fit-content;
    }

    .inline-badge-icon {
        padding: 0.3em;
        display: flex;
    }

    .badge-text {
        display: inline-block;
        font-size: 0.8em;
        padding-right: 0.238em;
        padding-top: 0.0952em;
        width: max-content;
    }

    .badge:hover {
        opacity: 0.8;
    }

    /* PORTRAIT ONLY */
    @media (orientation: portrait) {
        .badge {
            font-size: 1.1rem;
        }
    }
</style>
